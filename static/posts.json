{
    "posts": [
        {
            "id": "tether7",
            "title": "Learning Experiences",
            "date": "Mar 26, 2018",
            "content": "## Learning Experiences\n### What I Worked on This Week\nThis week I was able to talk to one of my friends about authorization and security around the back end of web-apps. This was extremely valuable as I was certainly under some small misconceptions about how things should work. Before I was having the user log in on our forms, sending this data over via POST, verifying the user credentials and then generating a random 32 digit token that was stored on their user in the database that could be used to authorize their requests through the use of BASIC auth. What I didn't realize was that I was using BASIC auth wrong (it turns out that is what is used when the browser gives you the login popup) and usually this is able to store a session token for the user. However we weren't using the built in tokens from BASIC because this isn't what I wanted the site to do. So in a round about way we were just mashing multiple ways of doing authorization together and not getting benefits from any of them. After talking with my friend he told me that we should be using cookies to store the user data as it was more secure than HTML5 localstorage for storing tokens and that our tokens should be hashes of values and a secret key that only the backend knows about. So I spent this week rewriting the authorization to use JSON Web Tokens which create a Hash based on a object and a server secret key which is stored as an environment variable and is a random 64 digit string. These tokens now have the users information encoded into them so that only they can be used to authorize for that user. The benefit of cookies is that they site specific cookies are passed with the requests made by the user so there is no need to write code on the frontend to pass tokens back and forth. Over all the authorization feels more elegant and robust now and I feel as if I learned quite a bit from the experience of writing it myself. I also added a couple of new routes on the backend that I needed for screens on the front. The ability to be able to get all children of a story and the ability to get the entire parent set of stories allow for the write and story screen to be populated with a single request. Also, after fixing the auth and patching the holes I got the backend hosted with Heroku, which is live at https://tetherapi.herokuapp.com/. If you go to /stories on the API you can see the simple data I have put in for testing!\n### What is in My Way\nWith Easter coming up I will be heading home on Friday to spend the weekend with my family so this weekend will not produce much work. I also have a Cloud Computing project due this weekend that will be butting heads with moving forward on Tether.\n### What I am Doing Next Week\nI did not do what I thought I was going to this past week, but with the backend shored up the only thing I can do is work on the frontend. Now that the API is hosted and live all the time testing with better data will help development on the front. Being able to see how things will actually be gives me more confidence that what I am doing is right. Right now I am feeling pretty good that there will be prototype up and running before that end of the semester and that I could even begin to add things on my 'v2' wishlist."
        },
        {
            "id": "tether6",
            "title": "Spring Break & Midterms",
            "date": "Mar 20, 2018",
            "content": "## A small break\n### What I Worked on This Week\nDue to midterms and travel over the last two weeks I certainly got less done that I would have liked. I reworked all of the current UI to work better on desktops. This meant going back through and adding CSS for each page. I have also been working on the leftover screens, the story view page and the profile page. One of the complications I have been having is deciding when to use routing to a new page or have something appear as an overlayed UI. I want to do more research on how it is properly done and when and how to pass infomation back and forth between the screens.\n### What is in My Way\nProjects in other classes and a ton of leftover art pieces that I need to complete for my 'drawing for nonmajors' course have been pushing on me. Having spotty internet over spring break to not be able to do more research on the parts I have been working on put me back more than I was expecting.\n### What I am Doing Next Week\nOnce again I need to hook up more of the API to the frontend, this will allow me to work on the UI's with good data so I can really see how things will look once the service is online. I also want to get the backend hosted so we can always have data to populate the front-end. I am looking into doing it on Heroku as that is something I have worked with before. I also want to have my applications flow and layout looked at by one of my friends who works with web alot as well. This is my first time using state-management on a larger application but he has experience with Redux so I want to see if he thinks the way I have things set up is the most optimal. That will give me more confidence in making the final steps forward."
        },
        {
            "id": "tether5",
            "title": "Building the Frontend Pieces",
            "date": "Feb 26, 2018",
            "content": "## Building the Pieces\n### What I Worked on This Week\nThis week I finished the login flow for the frontend. You can now run the api locally alongside the frontend and successfully login a user or create an account. While I was doing this I also made some changes to the backend, mainly changing how the authorization is handled. Before we were passing the username and authorization token back and forth for calls made to the api, but I modified it so that the user now passes their unique _id key given by mongo. This will speed up some lookups for calls that get users or posts from the users since the backend no longer has to search by username. I also finished the screen for posting a story. This screen was quite a challenge because of the dynamic nature I wanted to give it. The user can either have a fullscreen view of writing, or be able to see the parent story that they are working off of and get a smaller two-line typing window. It was a fun frontend task that felt like it pushed my knowledge of creating UI's.\n### What is in My Way\nLast week I had my Ethical Hacking midterm and this week I have a midterm in Cloud Computing so those have been pushing me back on working on Tether a bit.\n### What I am Doing Next Week\nNext week I want to link up more of the api, specifially having the proper posts loaded into the main screen based on the logged in user and having the post screen actually commit the story to the database. After I am done with those things I want to create the profile screen and have that populate with the correct data. Once the stories display, you can post, and you can look at profiles the MVP is done. Once the MVP is finished I want to go into testing and hosting the code. Once its hosted it will be very easy to get beta users that will be able to provide Tether with even better testing."
        },
        {
            "id": "tether4",
            "title": "Developmental Design Prototype",
            "date": "Feb 26, 2018",
            "content": "### Designing the frontend\nThis week I spent time creating static designs of what I want the frontend to eventually look like. After finishing the scaffolding and starting developing the frontend last week I realized I needed a more solid roadmap of what the UI would look like, how the navigation would flow before I could appropriately create some of the screens. This is what I have created so far: [prototype](https://xd.adobe.com/view/397c2d26-61f7-4bc6-9dbb-c1690322ef11)\nThe prototype is static screens but the software I am using (Adobe XD) allows for me to create the navigation so I can begin to get a feel of what using the app will be like. Along these lines this week I want to get this prototype into as many hands as I can. Once I have fine tuned some things I will start to create it with Vue.\nOne of the biggest challenges I think I will face throughout this process is communicating the idea of the story trees. Since each node is (at this point) containing 600 char, using an actual tree diagram would be rather pointless since you could not read any portion of the story. So I need to try to convey the ideas of 'parent' and 'child' throughout the UI. While testing it this week I want to see how much explanation it requires to allow people to understand that distiction or if it they will grasp it on their own. This could cause me to need a 'tutorial' esque screen on sign-up if the ideas are not fully clear, or a change in the UI.\nI also wanted to mention that these designs are mobile, as I am designing the website mobile first. The desktop screens will not be too drastically changed but allow for better viewing (larger fonts and padding). Since the size of the story portions are small and there is such a high demand for phone based applications  I believe that the application will perform better upon completion if the mobile experience is of very high quality."
        },
        {
            "id": "tether3",
            "title": "Beginning the Frontend",
            "date": "Feb 19, 2018",
            "content": "### Building out the structure for the frontend\nThis week I spent some time planning and starting building out the application structure for the frontend. I used a tool called 'vue-cli' to help me build out the basic bundling structure for Vue with Webpack. After getting that scaffolding I spent a lot of time learning about a state management tool caled Vuex (based on the principles of Flux and similar to Redux for React). I wanted to use this to be able to handle global events like manipulating screens and being able to have a single source of truth for the login credentials and request logic. I spent some time reading articles about how to best treat AJAX and login in Vue projects and got Vuex setup, hopefully in the best way. After getting the main structure down I started with the main navigation flow. I got a 'fake data' feed of stories and the navigation to and from posting stories done. However none of it is hitting the API yet. My plan for the next week is to finish up the prototypal frontend pieces, specifically the login screen and start hooking that up to real requests. Once I can get a user logged in and the authentication tokens remembered pulling stories and posting will be next. Once I have all of those done, login, posting, and reading, I want to spend sometime off of development testing it with real users. I want to do this as soon as I have a working version so that I can figure out what could be better and then implement it iteratively and get to the best state possible by the end of the semester.\n"
        },
        {
            "id": "tether2",
            "title": "API Design",
            "date": "Feb 10, 2018",
            "content": "### Finishing up with the design of the API\nThis week I worked on setting up login logic on the back-end. For this project I am using basic auth, so I had to come up with my own system for allowing authorization on requests. The basic design is as such:\n* The user creates an account by giving a username and password\n* The backend salts and hashes that password using the library bcrypt\n- When the user logs-in the backend uses bcrypt to compare the password to the encrypted version in the database\n* If the credentials are correct the backend generates a token that it gives back to the frontend\n* The frontend then uses this token to make requests as the user\nRight now this system isn't perfectly secure, the tokens that the backend uses to 'remember' users are randomly generated, but later on I want to create hashes that are created by using the username and some backend secret code. I have been reading and researching on secure methodology for having 'remember-me' keys like this and creating a hash that is not stored on the backend, but instead a generated key is a better way to go.\nThe state that the API is in will allow me to start working on the frontend soon. My goal for the first state is having a homescreen that shows all of the stories in the database. Then a login flow that a user can login with, and once they are logged in, be able to post stories to the database and see a profile that shows their stories.\n### Tools Roadmap\nFor the back and frontend I am using the ExpressJS web framework. For testing the backend I have been using Postman. I want to implement unit tests with Mocha on the backend. For the frontend I am using Vue to create the UI. The plan right now is to use a tool called Karma for testing on the frontend. Once the site is in an MVP state I will host both the API and frontend on AWS as I am taking cloud computing right now which focuses a lot on AWS."
        },
        {
            "id": "tether1",
            "title": "Humble Beginnings",
            "date": "Feb 1, 2018",
            "content": "### Getting started on my BDP creative project\nNow that I have finally officially got my BDP project approved I am getting started on my project 'TETHER'. Well, what is Tether? (name probably wont stick forever, but thats what the products development name will continue to be) Tether is aiming to be the first social platform for writers, giving creative writers a place to practice and interact with others in their field. The premise is based on community story telling, certainly not a new idea it is something we do as kids, when we participate in while in writing courses, or even when we play games like D&D. But how can we manage to bring this idea into the modern age, to close the distance required for people to participate in this kind of interactive experience? With Tether users will be able to create 'story nodes' which are basically bite-sized pieces of a story (probably something from 500-800 characters) then peers are able to create 'branches' off of their node and add onto the story. Users can branch off of any node as many times as they want allowing for endless possibilities for these stories. There's alot to that, so I want to talk about some of the technical details and the roadmap I have ahead of me.\n#### Technical Roadmap\nFor this project I am going to be building a node.js backend using express with MongoDB for persistence (and the mongoose library for interfacing with JS). This is the first road block to tackle and I have already started on it [(**TetherApi**)](https://github.com/Jaredk3nt/tetherApi). I chose these due to my familiarity with javascript, and familiarity with JSON rather than using SQL datastores. Currently I am almost done with a initial version of the API, it needs some more tweaking and testing (and unit testing), but as soon as that is done I will begin on what will be the larger portion of the project, the frontend. The basic idea for the site is simple enough. Modeling trees in the code and storing them in the database was quite simple, however displaying such information to a user will be much more difficult. I will be using a framework called VueJS which I have prior experience with (such as creating this website) to speed up the process of creating the frontend, however everything else I intend to do myself. Since my BDP certificate is in digital art (and my passion lies there as well) I take alot of pride in my ability to design interfaces from scratch. I will be creating a CSS framework as well as a toolset of modular Vue components for Tether to help in streamlining the overall build process by front loading a bit more work at the start. I really want the site to be designed well from the start using a proper atomic structure. That is that every part of the website is build from very small components called 'atoms', that make up bigger components called 'molecules' and so on until the whole site is complete. This will make it easier to make changes to the site, which will be very important to me as I am intending to do user research on the interfaces. Getting early versions into peoples hands will help me to eliminate my own biases and root out core problems early on in the development. I have already been working on mockups and getting feedback on them and hope that this will make my early prototypes go much smoother.\n### Conclusion\nI have a simple road-map that I can make more granular as I approach each phase. My current goal is to have the API hosted and running in the next week or two so that I can have a good base with which to test the frontend. I do have much less experience in creating API's so I am giving myself a little bit of leeway. However, once I start the front-end I hope to have a working prototype version up in about two weeks and have a cycle of user-testing, issue creating, and design iteration going until the end of the semester. Once I have the frontend repository up I will keeping track of issues using Github to keep me on track and focused on the most important tasks.\n **Wish me luck!**"
        },
        {
            "id": "markdown",
            "title": "Testing out my new tool, MarkyJS",
            "date": "January 22, 2018",
            "content": "### My first blog post with markdown\nI finally got around to implementing my own markdown parser, so now my blogposts are fully customizable with markdown! When I was in SWE I set up this blog in a couple of hours so I cut some corners. I only had plain text that could be put into HTML tags. Since we had to have section titles I built a very strictly formatted JSON file that allowed me to have section titles and my component would go through the array of section titles and text and create an unordered list out of them, styling them the correct way. This made it extremely hard to change up the format and basically made it so the blog could never be used for anything else. So a couple of days over the winter break to make **Markyjs** a simple markdown to HTML parser. Now all I have to do is include that as a dependency and then pass the markdown styled string I have stored for the blog post to marky `marky('some markdown here')` and voila!\n\nIt was a fun little project and now I am looking forward to my very very big project this semester that I shall be starting shortly!"
        }
    ]
}